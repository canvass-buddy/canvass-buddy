// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  teams TeamMember[]
  markers Marker[]

  profile Profile?
}

model Profile {
  id    String @id @default(uuid())
  image String?

  userId String @unique
  user   User?  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

}

model Team {
  id          String @id @default(uuid())
  title       String
  description String
  image String

  members TeamMember[]

  longitude Float
  latitude  Float

  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model TeamMember {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Project {
  id String @id @default(uuid())

  title String

  teamId String
  team Team @relation(fields: [teamId], references: [id])

  tasks Task[]

  area ProjectArea?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectArea {
  
  projectId String @id
  project Project @relation(fields: [projectId], references:[id], onDelete: Cascade)

  x1 Float
  x2 Float
  y1 Float
  y2 Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Task {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String
  description String
  type String

  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  completedTasks CompletedTask[]
}

model Marker {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  longitude Float
  latitude Float

  completedTasks CompletedTask[]
}

model CompletedTask {
  id String @id @default(uuid())

  taskId String
  task Task @relation(fields: [taskId], references:[id], onDelete: Cascade)

  markerId String
  marker Marker @relation(fields: [markerId], references:[id], onDelete: Cascade)
}
